<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
					xmlns:converters="http://metro.mahapps.com/winfx/xaml/shared">

	<Style x:Key="MultiSelectComboBox" TargetType="{x:Type ComboBox}">
		<Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
		<Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="controls:TextBoxHelper.ButtonWidth" Value="24" />
		<Setter Property="controls:TextBoxHelper.ButtonFontSize" Value="{DynamicResource ClearTextButtonFontSize}" />
		<Setter Property="controls:ControlsHelper.FocusBorderBrush" Value="{DynamicResource ComboBoxMouseOverInnerBorderBrush}" />
		<Setter Property="controls:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource TextBoxMouseOverBorderBrush}" />
		<Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
		<Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{DynamicResource MetroComboBoxItem}" />
		<Setter Property="MinHeight" Value="26" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<!--  change SnapsToDevicePixels to true to view a better border and validation error  -->
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="enterGotFocus">
							<DoubleAnimation Duration="0:0:0.2"
											 Storyboard.TargetName="PART_WatermarkMessage"
											 Storyboard.TargetProperty="Opacity"
											 To=".2" />
						</Storyboard>
						<Storyboard x:Key="exitGotFocus">
							<DoubleAnimation Duration="0:0:0.2"
											 Storyboard.TargetName="PART_WatermarkMessage"
											 Storyboard.TargetProperty="Opacity" />
						</Storyboard>

						<Storyboard x:Key="enterHasText">
							<DoubleAnimation Duration="0:0:0.2"
											 From=".2"
											 Storyboard.TargetName="PART_WatermarkMessage"
											 Storyboard.TargetProperty="Opacity"
											 To="0" />
						</Storyboard>
						<Storyboard x:Key="exitHasText">
							<DoubleAnimation Duration="0:0:0.2"
											 Storyboard.TargetName="PART_WatermarkMessage"
											 Storyboard.TargetProperty="Opacity" />
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="TextColumn" Width="*" />
								<ColumnDefinition x:Name="ButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:TextBoxHelper.ButtonWidth), Mode=OneWay}" />
								<ColumnDefinition x:Name="ToggleButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:TextBoxHelper.ButtonWidth), Mode=OneWay}" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition x:Name="ButtonRow" Height="*" />
							</Grid.RowDefinitions>

							<ToggleButton x:Name="PART_DropDownToggle"
										  Grid.RowSpan="2"
										  Grid.ColumnSpan="3"
										  Margin="0"
										  VerticalAlignment="Stretch"
										  Style="{DynamicResource MetroComboBoxDropDownToggleButtonStyle}"
										  Background="{TemplateBinding Background}"
										  Foreground="{TemplateBinding Foreground}"
										  BorderBrush="{TemplateBinding BorderBrush}"
										  BorderThickness="{TemplateBinding BorderThickness}"
										  controls:TextBoxHelper.ButtonWidth="{TemplateBinding controls:TextBoxHelper.ButtonWidth}"
										  controls:ControlsHelper.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.CornerRadius), Mode=OneWay}"
										  controls:TextBoxHelper.ButtonContent="{TemplateBinding controls:TextBoxHelper.ButtonContent}"
										  controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding controls:TextBoxHelper.ButtonContentTemplate}"
										  controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding controls:TextBoxHelper.ButtonFontFamily}"
										  controls:TextBoxHelper.ButtonFontSize="{TemplateBinding controls:TextBoxHelper.ButtonFontSize}"
										  controls:TextBoxHelper.ClearTextButton="{TemplateBinding controls:TextBoxHelper.ClearTextButton}"
										  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										  KeyboardNavigation.IsTabStop="False"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

							<TextBox x:Name="PART_EditableTextBox"
									 Grid.Column="0"
									 Grid.Row="1"
									 Margin="1"
									 Padding="{TemplateBinding Padding}"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									 Style="{StaticResource EditableTextBoxStyle}"
									 Background="{x:Null}"
									 Foreground="{TemplateBinding Foreground}"
									 BorderThickness="0"
									 FontFamily="{TemplateBinding FontFamily}"
									 FontSize="{TemplateBinding FontSize}"
									 controls:TextBoxHelper.ButtonWidth="{TemplateBinding controls:TextBoxHelper.ButtonWidth}"
									 controls:TextBoxHelper.ButtonContent="{TemplateBinding controls:TextBoxHelper.ButtonContent}"
									 controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding controls:TextBoxHelper.ButtonContentTemplate}"
									 controls:TextBoxHelper.HasText="{TemplateBinding controls:TextBoxHelper.HasText}"
									 controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding controls:TextBoxHelper.ButtonFontFamily}"
									 controls:TextBoxHelper.ButtonFontSize="{TemplateBinding controls:TextBoxHelper.ButtonFontSize}"
									 controls:TextBoxHelper.UseFloatingWatermark="{TemplateBinding controls:TextBoxHelper.UseFloatingWatermark}"
									 controls:TextBoxHelper.Watermark="{TemplateBinding controls:TextBoxHelper.Watermark}"
									 CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ComboBoxHelper.CharacterCasing), Mode=OneWay}"
									 Focusable="True"
									 IsReadOnly="{TemplateBinding IsReadOnly}"
									 MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ComboBoxHelper.MaxLength), Mode=OneWay}"
									 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									 Visibility="Collapsed" />
							<TextBlock x:Name="PART_WatermarkMessage"
									   Grid.Column="0"
									   Grid.Row="1"
									   Margin="6 2"
									   Padding="{TemplateBinding Padding}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									   Foreground="{TemplateBinding Foreground}"
									   Opacity="0.6"
									   FontFamily="{TemplateBinding FontFamily}"
									   FontSize="{TemplateBinding FontSize}"
									   IsHitTestVisible="False"
									   Text="{TemplateBinding controls:TextBoxHelper.Watermark}"
									   Visibility="Collapsed" />
							<ContentControl x:Name="PART_FloatingMessageContainer"
											Grid.Column="0"
											Grid.Row="0"
											Style="{DynamicResource FloatingMessageContainerStyle}">
								<TextBlock x:Name="PART_FloatingMessage"
										   Margin="2 2 0 0"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										   Style="{DynamicResource MetroAutoCollapsingTextBlock}"
										   Foreground="{TemplateBinding Foreground}"
										   Text="{TemplateBinding controls:TextBoxHelper.Watermark}" />
							</ContentControl>
							<Grid x:Name="ContentSite"
								  Grid.Column="0"
								  Grid.Row="1"
								  Margin="4 0 4 0">
								<ContentPresenter Margin="{TemplateBinding Padding}"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  Content="{TemplateBinding SelectionBoxItem}"
												  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
												  
												  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
												  IsHitTestVisible="False"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
									<ContentPresenter.ContentTemplate>

										<DataTemplate>
											<TextBlock x:Name="ComboBoxTextValue" Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"/>
											<DataTemplate.Triggers>
												<DataTrigger Binding="{Binding ElementName=ComboBoxTextValue, Path=Text}" Value="">
													<Setter Property="Visibility" Value="Hidden"/>
												</DataTrigger>
											</DataTemplate.Triggers>
										</DataTemplate>
									</ContentPresenter.ContentTemplate>
								</ContentPresenter>
							</Grid>
						</Grid>

						<Border x:Name="FocusBorder"
								Grid.ColumnSpan="3"
								Background="{x:Null}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.CornerRadius), Mode=OneWay}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								Visibility="Collapsed" />
						<Border x:Name="DisabledVisualElement"
								Grid.ColumnSpan="3"
								Background="{DynamicResource ControlsDisabledBrush}"
								BorderBrush="{DynamicResource ControlsDisabledBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Opacity="0.6"
								CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.CornerRadius), Mode=OneWay}"
								IsHitTestVisible="False"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								Visibility="Collapsed" />

						<!--  AllowsTransparency="true" fixes the redraw problem under windows vista/7 with a selected non aero theme  -->
						<Popup x:Name="PART_Popup"
							   AllowsTransparency="True"
							   Focusable="False"
							   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   Placement="Bottom"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
								<Border x:Name="PopupBorder"
										Height="Auto"
										HorizontalAlignment="Stretch"
										Background="{DynamicResource WhiteBrush}"
										BorderBrush="{DynamicResource ComboBoxPopupBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Effect="{DynamicResource DropShadowBrush}" />
								<ScrollViewer x:Name="DropDownScrollViewer"
											  Margin="2"
											  Padding="1"
											  BorderThickness="0">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
								</ScrollViewer>
							</Grid>
						</Popup>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused" />
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="FocusedDropDown">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Duration="00:00:00"
																	   Storyboard.TargetName="PopupBorder"
																	   Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" Value="{x:Null}" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_WatermarkMessage" Property="Visibility" Value="Visible" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static converters:IsNullConverter.Instance}}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource enterGotFocus}" />
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource exitGotFocus}" />
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static converters:IsNullConverter.Instance}}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource enterHasText}" />
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource exitHasText}" />
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static converters:IsNullConverter.Instance}}" Value="False" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>

						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(controls:TextBoxHelper.ClearTextButton)}" Value="False">
							<Setter TargetName="ContentSite" Property="Grid.ColumnSpan" Value="2" />
							<Setter TargetName="PART_EditableTextBox" Property="Grid.ColumnSpan" Value="2" />
							<Setter TargetName="PART_WatermarkMessage" Property="Grid.ColumnSpan" Value="2" />
						</DataTrigger>
						<Trigger Property="IsEditable" Value="True">
							<Setter Property="IsTabStop" Value="false" />
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
							<Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEditable" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource GrayBrush9}" />
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.MouseOverBorderBrush)}" />
							<Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
							<Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.FocusBorderBrush)}" />
							<Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.FocusBorderBrush)}" />
							<Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
							<Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
							<Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.FocusBorderBrush)}" />
							<Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="DisabledVisualElement" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="VirtualisedMetroComboBox"
		   BasedOn="{StaticResource MetroComboBox}"
		   TargetType="{x:Type ComboBox}">
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel IsItemsHost="True"
											IsVirtualizing="True"
											KeyboardNavigation.DirectionalNavigation="Contained"
											VirtualizationMode="Recycling" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="True">
				<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="MetroComboBoxItem" TargetType="ComboBoxItem">
		<Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
		<Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBoxItem">
					<Grid Margin="0 0.5" Background="{TemplateBinding Background}">
						<Border x:Name="ItemBackground"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								IsHitTestVisible="False"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ContentPresenter x:Name="contentPresenter"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  TextElement.Foreground="{TemplateBinding Foreground}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity">
											<SplineDoubleKeyFrame KeyTime="0" Value=".55" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
							<Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource AccentColorBrush2}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>