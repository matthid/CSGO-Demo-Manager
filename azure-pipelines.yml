# Build and Release Pipeline

trigger:
- master
- release/next

pr:
- master
- release/next

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.cache/yarn
  NUGET_PACKAGES: $(Pipeline.Workspace)/.cache/nuget
  create_certificate: true
stages:
- stage: CI
  dependsOn: []
  jobs:
  - job: CI
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    steps:
    - task: CacheBeta@0
      inputs:
        key: |
          $(Agent.OS)
          $(Build.SourcesDirectory)/yarn.lock
        path: $(Pipeline.Workspace)/.cache/yarn
      displayName: 'Cache yarn'
    - task: CacheBeta@0
      inputs:
        key: |
          $(Agent.OS)
          $(Build.SourcesDirectory)/paket.lock
        path: $(NUGET_PACKAGES)
      displayName: 'Cache NuGet'
    - task: DownloadSecureFile@1
      name: codesign
      condition: and(succeeded(), of(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/next')))
      displayName: 'Download Code Sign certificate'
      inputs:
        secureFile: 'codesign.pfx'
    - bash: echo "##vso[task.setvariable variable=certificate_file;]$(codesign.secureFilePath)"
      condition: and(succeeded(), of(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/next')))
    - bash: echo "##vso[task.setvariable variable=create_certificate;]false"
      condition: and(succeeded(), of(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/next')))
    - task: matthid.fsharp-helpers-extension-private.a2dadf20-1a83-4220-a4ee-b52f6c77f3cf.FAKE5@1
      displayName: 'Run the CI Build'
      inputs:
        FakeVersion: '5.15.4'
        ScriptArguments: '--parallel 3 -t CI'
- stage: Release_Github
  dependsOn: [ "CI" ]
  # condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  #- job: ManualIntervention
  #  pool: server
  #  steps:
  #  - task: ManualIntervention@8
  #    inputs:
  #      instructions: 'Please approve in order to deploy as GitHub Release'
  - deployment: deploy_github_release
    displayName: deploy to Github Releases
    pool:
      vmImage: 'windows-latest'
    # creates an environment if it doesn't exist
    environment: 'github-release'
    continueOnError: false
    variables:
      artifactsdirectory: $(Pipeline.Workspace)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: windows-app
          - download: current
            artifact: windows-installer
          - download: current
            artifact: portable-files
          - task: CacheBeta@0
            inputs:
              key: |
                $(Agent.OS)
                $(Build.SourcesDirectory)/paket.lock
              path: $(NUGET_PACKAGES)
            displayName: 'Cache NuGet'
          - task: DownloadSecureFile@1
            name: codesign
            displayName: 'Download Code Sign certificate'
            inputs:
              secureFile: 'codesign.pfx'
          - bash: echo "##vso[task.setvariable variable=certificate_file;]$(codesign.secureFilePath)"
          - task: matthid.fsharp-helpers-extension-private.a2dadf20-1a83-4220-a4ee-b52f6c77f3cf.FAKE5@1
            displayName: 'Run the Github Release'
            inputs:
              FakeVersion: '5.15.4'
              ScriptArguments: '--parallel 3 -t Release_Github'

